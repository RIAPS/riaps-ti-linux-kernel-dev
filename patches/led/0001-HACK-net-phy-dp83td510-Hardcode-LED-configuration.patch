From a9f41e5114e0d88b681328a44b3a4170d687312e Mon Sep 17 00:00:00 2001
From: Nishanth Menon <nm@ti.com>
Date: Tue, 13 Dec 2022 14:25:59 -0600
Subject: [PATCH] HACK: net: phy: dp83td510: Hardcode LED configuration

Hardcode LED configuration for LED2 signal to be link status
and LED0 signal to be rx/tx

Signed-off-by: Nishanth Menon <nm@ti.com>
---
 drivers/net/phy/dp83td510.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/drivers/net/phy/dp83td510.c b/drivers/net/phy/dp83td510.c
index 1ae792b0daaa..dd286bb03305 100644
--- a/drivers/net/phy/dp83td510.c
+++ b/drivers/net/phy/dp83td510.c
@@ -27,6 +27,18 @@
 #define DP83TD510E_AN_STAT_1			0x60c
 #define DP83TD510E_MASTER_SLAVE_RESOL_FAIL	BIT(15)
 
+int dp83td510_config_init(struct phy_device *phydev)
+{
+	/*
+	 * Use 0x0049 If we wanted the green LED to be the Rx/Tx indicator.
+	 * But the orange LED is just overwhelming.
+	 * So pick the other way around - Link LED is the green one
+	 * (assuming there is just intermittent data traffic, and don't
+	 * blind the folks), just use the orange LED for link traffic.
+	 */
+	return phy_write_mmd(phydev, MDIO_MMD_VEND2, 0x460, 0x0940);
+}
+
 static int dp83td510_config_intr(struct phy_device *phydev)
 {
 	int ret;
@@ -187,6 +199,7 @@ static struct phy_driver dp83td510_driver[] = {
 	PHY_ID_MATCH_MODEL(DP83TD510E_PHY_ID),
 	.name		= "TI DP83TD510E",
 
+	.config_init    = dp83td510_config_init,
 	.config_aneg	= dp83td510_config_aneg,
 	.read_status	= dp83td510_read_status,
 	.get_features	= dp83td510_get_features,
-- 
2.30.2

