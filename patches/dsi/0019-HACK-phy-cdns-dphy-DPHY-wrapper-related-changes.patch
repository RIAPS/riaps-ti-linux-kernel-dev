From 21885cea6e65d54e169ec722b5599b177e5b986e Mon Sep 17 00:00:00 2001
From: Jayshri Pawar <jpawar@cadence.com>
Date: Wed, 2 Feb 2022 17:11:53 +0530
Subject: [PATCH 19/22] HACK: phy: cdns-dphy: DPHY wrapper related changes

Add TI wrapper related settings to dphy tx,
this need to be fixed cleanly by removing the
hard codings and isolation the wrapper changes
to only J721E

Signed-off-by: Jayshri Pawar <jpawar@cadence.com>
Signed-off-by: Rahul T R <r-ravikumar@ti.com>
---
 drivers/phy/cadence/cdns-dphy.c | 54 ++++++++++++++++++++++-----------
 1 file changed, 37 insertions(+), 17 deletions(-)

diff --git a/drivers/phy/cadence/cdns-dphy.c b/drivers/phy/cadence/cdns-dphy.c
index 9066d96ba05b..4da52d590e3f 100644
--- a/drivers/phy/cadence/cdns-dphy.c
+++ b/drivers/phy/cadence/cdns-dphy.c
@@ -21,6 +21,7 @@
 
 #define REG_WAKEUP_TIME_NS		800
 #define DPHY_PLL_RATE_HZ		108000000
+#define POLL_TIMEOUT_US			1000
 
 /* DPHY registers */
 #define DPHY_PMA_CMN(reg)		(reg)
@@ -89,6 +90,16 @@
 #define DPHY_LANES_MIN			1
 #define DPHY_LANES_MAX			4
 
+#define DPHY_TX_PLL_CTRL        0xF04
+#define DPHY_TX_STATUS          0xF08
+#define DPHY_TX_RST_CTRL        0xF0C
+#define DPHY_TX_PSM_FREQ        0xF10
+
+#define IPDIV_WIZ		GENMASK(4, 0)
+#define OPDIV_WIZ		GENMASK(13, 8)
+#define FBDIV_WIZ		GENMASK(25, 16)
+
+
 struct cdns_dphy_cfg {
 	u8 pll_ipdiv;
 	u8 pll_opdiv;
@@ -192,6 +203,9 @@ static int cdns_dsi_get_dphy_pll_cfg(struct cdns_dphy *dphy,
 	cfg->pll_fbdiv = DIV_ROUND_UP_ULL(dlane_bps * 2 * cfg->pll_opdiv *
 					  cfg->pll_ipdiv,
 					  pll_ref_hz);
+	dphy->cfg.pll_ipdiv = cfg->pll_ipdiv;
+	dphy->cfg.pll_opdiv = cfg->pll_opdiv;
+	dphy->cfg.pll_fbdiv = cfg->pll_fbdiv;
 
 	return 0;
 }
@@ -232,34 +246,25 @@ static unsigned long cdns_dphy_get_wakeup_time_ns(struct cdns_dphy *dphy)
 
 static unsigned long cdns_dphy_ref_get_wakeup_time_ns(struct cdns_dphy *dphy)
 {
-	/* Default wakeup time is 800 ns (in a simulated environment). */
-	return 800;
+	/* Set minimum wakeup time (1000 us == 1000000 ns). */
+	return 1000000;
 }
 
 static void cdns_dphy_ref_set_pll_cfg(struct cdns_dphy *dphy,
 				      const struct cdns_dphy_cfg *cfg)
 {
-	u32 fbdiv_low, fbdiv_high;
-
-	fbdiv_low = (cfg->pll_fbdiv / 4) - 2;
-	fbdiv_high = cfg->pll_fbdiv - fbdiv_low - 2;
-
-	writel(DPHY_CMN_IPDIV_FROM_REG | DPHY_CMN_OPDIV_FROM_REG |
-	       DPHY_CMN_IPDIV(cfg->pll_ipdiv) |
-	       DPHY_CMN_OPDIV(cfg->pll_opdiv),
-	       dphy->regs + DPHY_CMN_OPIPDIV);
-	writel(DPHY_CMN_FBDIV_FROM_REG |
-	       DPHY_CMN_FBDIV_VAL(fbdiv_low, fbdiv_high),
-	       dphy->regs + DPHY_CMN_FBDIV);
-	writel(DPHY_CMN_PWM_HIGH(6) | DPHY_CMN_PWM_LOW(0x101) |
+	writel(DPHY_CMN_PWM_HIGH(0xE) | DPHY_CMN_PWM_LOW(0x1FF) |
 	       DPHY_CMN_PWM_DIV(0x8),
 	       dphy->regs + DPHY_CMN_PWM);
 }
 
 static void cdns_dphy_ref_set_psm_div(struct cdns_dphy *dphy, u8 div)
 {
-	writel(DPHY_PSM_CFG_FROM_REG | DPHY_PSM_CLK_DIV(div),
-	       dphy->regs + DPHY_PSM_CFG);
+	unsigned long psm_clk_hz = clk_get_rate(dphy->psm_clk);
+
+	/* The signal must be driven such a that internal
+	 * freq of divided  psm clock is 1MHZ*/
+	writel(psm_clk_hz/1000000, dphy->regs + DPHY_TX_PSM_FREQ);
 }
 
 static int cdns_dphy_tx_config_from_opts(struct phy *phy,
@@ -333,6 +338,7 @@ static int cdns_dphy_tx_validate(struct cdns_dphy *dphy, enum phy_mode mode,
 
 static int cdns_dphy_tx_power_on(struct cdns_dphy *dphy)
 {
+	u32 status;
 	if (!dphy->psm_clk || !dphy->pll_ref_clk)
 		return -EINVAL;
 
@@ -342,6 +348,20 @@ static int cdns_dphy_tx_power_on(struct cdns_dphy *dphy)
 	/* Start TX state machine. */
 	writel(DPHY_CMN_SSM_EN | DPHY_CMN_TX_MODE_EN,
 	       dphy->regs + DPHY_CMN_SSM);
+	writel(0x00000229 , dphy->regs + DPHY_CMN_SSM);   //  this value is required for pll lock
+	/* Lane reset */	//Required for PLL LOCK
+	writel(0x80000000, dphy->regs + DPHY_TX_RST_CTRL);
+
+	writel((FIELD_PREP(IPDIV_WIZ, dphy->cfg.pll_ipdiv) | FIELD_PREP(OPDIV_WIZ, dphy->cfg.pll_opdiv) |
+				FIELD_PREP(FBDIV_WIZ, dphy->cfg.pll_fbdiv)), dphy->regs + DPHY_TX_PLL_CTRL);
+
+ 	writel(0x14A, dphy->regs + DPHY_BAND_CFG);
+
+	readl_poll_timeout(dphy->regs + DPHY_TX_PLL_CTRL, status,
+					(status & 0x80000000), 0, POLL_TIMEOUT_US);
+
+	readl_poll_timeout(dphy->regs + DPHY_TX_STATUS, status,
+					(status & 0x80000000), 0, POLL_TIMEOUT_US);
 
 	return 0;
 }
-- 
2.30.2

